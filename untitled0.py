# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Jppano7SO1uNpU0lEkHjCGWWF8OBxMb
"""

import pandas as pd
import matplotlib.pyplot as plt
import time
import numpy as np
import random
import numpy.random as random


def plot_paths(x, starting_price):

  timesteps = len(x[0])
  plt.figure(figsize=(40,20))
  plt.autoscale(enable=True, axis='x', tight=True)
  for path in x:
      plt.plot(range(timesteps),path)
  plt.plot(range(timesteps),[starting_price]*(timesteps),'b')
  plt.title('Paths by Monte Carlo Simulations')
  plt.xlabel('Time')
  plt.ylabel('Stock Price')
  plt.show()

def plot_final_dist(x):

  fig, ax = plt.subplots(figsize =(40, 20))
  ax.hist(x, bins = 100)
  plt.title('Distribution of final Stock Price')
  plt.xlabel('Price')
  plt.ylabel('No. of occurences')
  plt.show()

timesteps = 30
starting_price = 600
volatility = 0.02   #2%=0.02
max_simulations = 5000
paths=[]
m=0
while m<max_simulations:
    c=0
    ps=[]
    ps.append(starting_price)
    price=starting_price*(1+random.normal(0,volatility))
    ps.append(price)

    for y in range(timesteps):
        if c==29:
            break
        price=ps[c+1]*(1+random.normal(0,volatility))
        ps.append(price)
        c+=1
    paths.append(ps)#appending list in paths list
    m=m+1
final_values=[]
j=0
while j<len(paths):
    for k in paths:
        final_values.append(paths[j][-1])
        j+=1

plot_paths(paths, starting_price)
plot_final_dist(final_values)
README.md
